// Jenkinsfile.sut_build_staging (in majd.kassem.business.git)
pipeline {
    agent any // This job can run on any available Jenkins agent.

    environment {
        SUT_REPO = 'https://github.com/majd-j-kassem/majd.kassem.business.git'
        SUT_BRANCH_DEV = 'dev'
        STAGING_URL = 'https://majd-kassem-business-dev.onrender.com/' // Your Render staging URL
        QA_JOB_NAME = 'QA-Tests-Staging' // EXACT name of the Jenkins job for QA tests
        GIT_CREDENTIAL_ID = 'git_id' // <--- Use the ID you created in Step 1
        DJANGO_SETTINGS_MODULE = 'auth_system.settings' // ADDED: Needed for Django commands
    }

    stages {
        stage('Checkout SUT Dev') {
            steps {
                script {
                    echo "Checking out SUT repository: ${env.SUT_REPO}, branch: ${env.SUT_BRANCH_DEV}"
                    dir('sut-code') { // Checkout into a dedicated directory
                        git branch: env.SUT_BRANCH_DEV, credentialsId: env.GIT_CREDENTIAL_ID, url: env.SUT_REPO
                    }
                }
            }
        }

        // ADDED STAGE: Setup Python Environment
        stage('Setup Python Environment') {
            steps {
                script {
                    echo "Setting up Python virtual environment and installing dependencies..."
                    dir('sut-code') {
                        sh 'python3 -m venv .venv'
                        sh '. .venv/bin/activate && pip install --upgrade pip'
                        sh '. .venv/bin/activate && pip install -r requirements.txt'
                    }
                }
            }
        }
         // SEPARATED STAGE: Run Unit Tests
        stage('Run Unit Tests') {
            steps {
                script {
                    echo "Running Django unit tests with pytest..."
                    dir('sut-code') {
                        // Pytest will auto-discover tests in accounts/tests/unit based on your structure
                        sh '. .venv/bin/activate && pytest accounts/tests/unit'
                    }
                }
            }
        }
         // SEPARATED STAGE: Run Integration Tests
        stage('Run Integration Tests') {
            // This stage will only run if the 'Run Unit Tests' stage (and prior) passed
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Running Django integration tests with pytest..."
                    dir('sut-code') {
                        // Apply migrations for the test database.
                        sh '. .venv/bin/activate && python manage.py migrate --noinput'
                        // Run integration tests
                        sh '. .venv/bin/activate && pytest accounts/tests/integration'
                    }
                }
            }
        }
        stage('Build and Deploy SUT to Staging (via Render)') {
            // MODIFIED: Added 'when' condition to only run if previous stages passed
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "SUT deployment to staging triggered by Render on commit to ${env.SUT_BRANCH_DEV}."
                    echo "Waiting 30 seconds for Render deployment to complete. (Consider polling health endpoint for robustness)."
                    sleep 30 // MODIFIED: Increased sleep to 30 seconds
                    echo "Assumed Render deployment to staging is complete."
                }
            }
        }
        stage('Trigger QA Tests against Staging') {
            // MODIFIED: Added 'when' condition to only run if previous stages passed
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Triggering downstream QA job: ${env.QA_JOB_NAME}"
                    // MODIFIED: Added 'wait: true' to wait for the downstream job's completion
                    build job: env.QA_JOB_NAME, parameters: [
                        string(name: 'STAGING_URL_PARAM', value: env.STAGING_URL)
                    ], wait: true
                }
            }
        }
    }

    post {
        always {
            deleteDir() // Clean up the workspace
        }
        success {
            echo 'SUT Build and Deploy to Staging pipeline finished successfully.'
        }
        failure {
            echo 'SUT Build and Deploy to Staging pipeline FAILED.'
        }
    }
}
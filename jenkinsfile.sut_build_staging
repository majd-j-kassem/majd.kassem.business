// Jenkinsfile.sut_build_staging (in majd.kassem.business.git)
pipeline {
    agent any // This job can run on any available Jenkins agent.

    environment {
        SUT_REPO = 'https://github.com/majd-j-kassem/majd.kassem.business.git'
        SUT_BRANCH_DEV = 'dev'
        STAGING_URL = 'https://majd-kassem-business-dev.onrender.com/' // Your Render staging URL
        QA_JOB_NAME = 'QA-Tests-Staging' // EXACT name of the Jenkins job for QA tests
        GIT_CREDENTIAL_ID = 'git_id' // <--- Use the ID you created in Step 1
        // MODIFIED: Correct DJANGO_SETTINGS_MODULE based on your project structure
        DJANGO_SETTINGS_MODULE = 'my_learning_platform.settings'
        ALLURE_RESULTS_DIR = 'allure-results'
        API_TESTS_DIR = 'api-tests'
        NEWMAN_ALLURE_RESULTS_DIR = 'newman-allure-results'
    }

    stages {
        stage('Checkout SUT Dev') {
            steps {
                script {
                    echo "Checking out SUT repository: ${env.SUT_REPO}, branch: ${env.SUT_BRANCH_DEV}"
                    dir('sut-code') { // Checkout into a dedicated directory
                        git branch: env.SUT_BRANCH_DEV, credentialsId: env.GIT_CREDENTIAL_ID, url: env.SUT_REPO
                    }
                }
            }
        }
        stage('Setup Python Environment') {
            steps {
                script {
                    echo "Setting up Python virtual environment and installing dependencies..."
                    dir('sut-code') {
                        sh 'python3 -m venv .venv'
                        // Use a single `bash -c` block for activation and commands
                        sh """
                            #!/bin/bash
                            source .venv/bin/activate
                            pip install --upgrade pip
                            pip install -r requirements.txt
                        """
                    }
                }
            }
        }
        stage('Run Unit Tests') {
            steps {
                script {
                    echo "Running Django unit tests with pytest and generating Allure results..."
                    dir('sut-code') {
                        // MODIFIED: Clear previous Allure results for unit tests to ensure fresh data
                        sh "rm -rf ${env.ALLURE_RESULTS_DIR}/unit-tests"
                        sh "mkdir -p ${env.ALLURE_RESULTS_DIR}/unit-tests"
                        sh """
                            #!/bin/bash
                            source .venv/bin/activate

                            # Set the Django settings module for pytest-django
                            export DJANGO_SETTINGS_MODULE=${env.DJANGO_SETTINGS_MODULE}
                            # Add the project's base directory (which contains manage.py and my_learning_platform/) to PYTHONPATH
                            export PYTHONPATH="${PWD}"

                            pytest accounts/tests/unit --alluredir=${env.ALLURE_RESULTS_DIR}/unit-tests
                        """
                    }
                }
            }
        }
        stage('Run Integration Tests') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Running Django integration tests with pytest and generating Allure results..."
                    dir('sut-code') {
                        // Ensure Django can run commands like migrate with the correct settings
                        sh """
                            #!/bin/bash
                            source .venv/bin/activate
                            export DJANGO_SETTINGS_MODULE=${env.DJANGO_SETTINGS_MODULE}
                            export PYTHONPATH="${PWD}" # Ensure correct path for manage.py
                            python manage.py migrate --noinput
                        """
                        // MODIFIED: Clear previous Allure results for integration tests
                        sh "rm -rf ${env.ALLURE_RESULTS_DIR}/integration-tests"
                        sh "mkdir -p ${env.ALLURE_RESULTS_DIR}/integration-tests"
                        sh """
                            #!/bin/bash
                            source .venv/bin/activate
                            export DJANGO_SETTINGS_MODULE=${env.DJANGO_SETTINGS_MODULE}
                            export PYTHONPATH="${PWD}"

                            pytest accounts/tests/integration --alluredir=${env.ALLURE_RESULTS_DIR}/integration-tests
                        """
                        echo "Generating Allure report for Unit and Integration tests..."
                        // Allure report generation will now combine unit-tests and integration-tests
                        allure([
                            includeProperties: false,
                            jdk: '', // Leave empty if Jenkins handles Java or Allure doesn't need a specific JDK for generation
                            reportBuildPolicy: 'ALWAYS',
                            results: ["${env.ALLURE_RESULTS_DIR}/unit-tests", "${env.ALLURE_RESULTS_DIR}/integration-tests"]
                        ])
                    }
                }
            }
        }
        stage('Run API Tests') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Running Postman API tests with Newman..."
                    dir('sut-code') {
                        sh "npm install -g newman newman-reporter-allure"
                        // MODIFIED: Clear previous Newman Allure results
                        sh "rm -rf ${env.ALLURE_RESULTS_DIR}/${env.NEWMAN_ALLURE_RESULTS_DIR}"
                        sh "mkdir -p ${env.ALLURE_RESULTS_DIR}/${env.NEWMAN_ALLURE_RESULTS_DIR}"
                        sh "newman run ${env.API_TESTS_DIR}/your_collection.json -e ${env.API_TESTS_DIR}/your_environment.json -r allure --reporter-allure-export=${env.ALLURE_RESULTS_DIR}/${env.NEWMAN_ALLURE_RESULTS_DIR}"
                    }
                }
            }
        }
        stage('Build and Deploy SUT to Staging (via Render)') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "SUT deployment to staging triggered by Render on commit to ${env.SUT_BRANCH_DEV}."
                    echo "Waiting 30 seconds for Render deployment to complete. (Consider polling health endpoint for robustness)."
                    sleep 30 // MODIFIED: Increased sleep to 30 seconds
                    echo "Assumed Render deployment to staging is complete."
                }
            }
        }
        stage('Trigger QA Tests against Staging') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Triggering downstream QA job: ${env.QA_JOB_NAME}"
                    build job: env.QA_JOB_NAME, parameters: [
                        string(name: 'STAGING_URL_PARAM', value: env.STAGING_URL)
                    ], wait: true
                }
            }
        }
    }

    post {
        always {
            deleteDir() // Clean up the workspace
        }
        success {
            echo 'SUT Build and Deploy to Staging pipeline finished successfully.'
        }
        failure {
            echo 'SUT Build and Deploy to Staging pipeline FAILED.'
        }
    }
}
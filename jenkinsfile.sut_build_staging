// Jenkinsfile.sut_build_staging (in majd.kassem.business.git)
pipeline {
    agent any // This job can run on any available Jenkins agent.
    tools{
        nodejs 'NodeJS_24'
    }

    environment {
        SUT_REPO = 'https://github.com/majd-j-kassem/majd.kassem.business.git'
        SUT_BRANCH_DEV = 'dev'
        STAGING_URL = 'https://majd-kassem-business-dev.onrender.com/' // Ensure this is your actual Render dev URL
        QA_JOB_NAME = 'QA-Tests-Staging'
        GIT_CREDENTIAL_ID = 'git_id'
        DJANGO_SETTINGS_MODULE = 'my_learning_platform_core.settings'

        // Define Allure results directory relative to workspace root
        ALLURE_RESULTS_ROOT = 'allure-results'
        API_TESTS_DIR = 'API_POSTMAN' // Assuming your Postman files are in a folder named API_POSTMAN
    }

    stages {
        stage('Test NodeJS Tool') {
            steps {
                script {
                    echo "Attempting to use NodeJS tool..."
                    sh 'node -v' // Check if node command is available
                    sh 'npm -v'  // Check if npm command is available
                }
            }
        }

        stage('Checkout SUT Dev') {
            steps {
                script {
                    echo "Checking out SUT repository: ${env.SUT_REPO}, branch: ${env.SUT_BRANCH_DEV}"
                    dir('sut-code') { // Checkout into a dedicated directory
                        git branch: env.SUT_BRANCH_DEV, credentialsId: env.GIT_CREDENTIAL_ID, url: env.SUT_REPO
                    }
                }
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    echo "Setting up Python virtual environment and installing dependencies..."
                    dir('sut-code') {
                        sh 'python3 -m venv .venv'
                        // Use bash -c to ensure activate sources in the same shell as pip commands
                        sh 'bash -c "source .venv/bin/activate && pip install --upgrade pip"'
                        sh 'bash -c "source .venv/bin/activate && pip install -r requirements.txt"'
                    }
                }
            }
        }

        stage('Setup NodeJS and Newman') {
            steps {
                script {
                    echo "Installing Newman and Allure reporter..."
                    sh 'npm install -g newman newman-reporter-allure newman-reporter-htmlextra'
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    echo "Running Django unit tests with pytest and generating Allure results..."
                    dir('sut-code/my_learning_platform') {
                        // Define absolute path for Allure results for unit tests
                        def unitTestAllureResultsDir = "${pwd()}/../${ALLURE_RESULTS_ROOT}/unit-tests"

                        sh "rm -rf ${unitTestAllureResultsDir}"
                        sh "mkdir -p ${unitTestAllureResultsDir}"

                        sh '''#!/bin/bash
                            # Check if the core app directory exists
                            [ -d my_learning_platform_core ] && echo "my_learning_platform_core directory found." || echo "Error: my_learning_platform_core directory NOT found."
                            source ../.venv/bin/activate
                            pytest accounts/tests/unit --alluredir=''' + unitTestAllureResultsDir + '''
                        '''
                    }
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                script {
                    echo "Running Django integration tests with pytest and generating Allure results..."
                    dir('sut-code/my_learning_platform') {
                        // Define absolute path for Allure results for integration tests
                        def integrationTestAllureResultsDir = "${pwd()}/../${ALLURE_RESULTS_ROOT}/integration-tests"

                        sh "rm -rf ${integrationTestAllureResultsDir}"
                        sh "mkdir -p ${integrationTestAllureResultsDir}"

                        sh '''#!/bin/bash
                            source ../.venv/bin/activate
                            pytest accounts/tests/integration --alluredir=''' + integrationTestAllureResultsDir + '''
                        '''
                    }
                }
            }
        }

        stage('Build and Deploy SUT to Staging (via Render)') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "SUT deployment to staging triggered by Render on commit to ${env.SUT_BRANCH_DEV}."
                    echo "Waiting 30 seconds for Render deployment to complete. (Consider polling health endpoint for robustness)."
                    sleep 10 // This is a placeholder; a health check would be better
                    echo "Assumed Render deployment to staging is complete."
                }
            }
        }

        stage('Run API Tests') {
            steps {
                script {
                    echo "Running Postman API tests with Newman and generating Allure results..."

                    // Define the full absolute path for Newman's Allure results
                    def newmanAllureResultsAbsoluteDir = "${pwd()}/${ALLURE_RESULTS_ROOT}/api-tests"

                    // Clean and create directory structure using the absolute path
                    sh "rm -rf ${newmanAllureResultsAbsoluteDir}"
                    sh "mkdir -p ${newmanAllureResultsAbsoluteDir}"

                    dir("sut-code/${env.API_TESTS_DIR}") {
                        sh """#!/bin/bash
                            echo "Current directory: \$(pwd)"
                            echo "Files in directory:"
                            ls -la

                            if [ ! -f "5_jun_env.json" ]; then
                                echo "ERROR: Environment file 5_jun_env.json not found!"
                                exit 1
                            fi

                            # Pass the STAGING_URL from Jenkins environment to Newman's 'baseUrl' variable
                            newman run 5_jun_api.json \\
                                --folder "test_1" \\
                                -e 5_jun_env.json \\
                                --reporters cli,htmlextra,allure \\
                                --reporter-htmlextra-export newman-report.html \\
                                --reporter-allure-export ${newmanAllureResultsAbsoluteDir} \\
                                --env-var "baseUrl=${env.STAGING_URL}"
                        """
                    }
                }
            }
        }

        stage('Trigger QA Tests against Staging') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Triggering downstream QA job: ${env.QA_JOB_NAME}"
                    // Ensure the 'STAGING_URL_PARAM' matches the parameter name in your QA-Tests-Staging job
                    build job: env.QA_JOB_NAME, parameters: [
                        string(name: 'STAGING_URL_PARAM', value: env.STAGING_URL)
                    ], wait: true
                }
            }
        }
    }

    post {
        // This 'always' block ensures these steps run regardless of the build outcome (success, failure, unstable, aborted).
        always {
            script {
                echo "Publishing Allure Report..."
                tool name: 'Allure_2.34.0', type: 'ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation'

                allure(
                    reportBuildPolicy: 'ALWAYS',
                    results: [
                        [path: "${env.ALLURE_RESULTS_ROOT}/unit-tests"],
                        [path: "${env.ALLURE_RESULTS_ROOT}/integration-tests"],
                        [path: "${env.ALLURE_RESULTS_ROOT}/api-tests"]
                    ],
                    includeProperties: false,
                    jdk: '',
                    properties: []
                )
                echo "Allure Report should be available via the link on the build page."
            }
            // Cleans up the workspace on the Jenkins agent regardless of build result
            // It's generally good to deleteDir() AFTER publishing reports/artifacts if they are generated in the workspace.
            deleteDir()
        }
        success {
            echo 'SUT Build and Deploy to Staging pipeline finished successfully.'
        }
        unstable {
            echo 'SUT Build and Deploy to Staging pipeline finished with UNSTABLE tests.'
        }
        failure {
            echo 'SUT Build and Deploy to Staging pipeline FAILED.'
            // You might add notifications here, e.g., email or Slack
            // mail to: 'devs@example.com', subject: "Jenkins Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
        }
        aborted {
            echo 'SUT Build and Deploy to Staging pipeline ABORTED.'
        }
    }
}
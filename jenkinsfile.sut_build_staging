// Jenkinsfile.sut_build_staging (in majd.kassem.business.git)
pipeline {
    agent any // This job can run on any available Jenkins agent.

    environment {
        SUT_REPO = 'https://github.com/majd-j-kassem/majd.kassem.business.git'
        SUT_BRANCH_DEV = 'dev'
        STAGING_URL = 'https://majd-kassem-business-dev.onrender.com/' 
        QA_JOB_NAME = 'QA-Tests-Staging' 
        GIT_CREDENTIAL_ID = 'git_id'         
        // --- MODIFICATION START ---
        // Correct DJANGO_SETTINGS_MODULE to match pytest.ini's expectation when my_learning_platform is the base
        DJANGO_SETTINGS_MODULE = 'my_learning_platform_core.settings'
        // --- MODIFICATION END ---

        // Define Allure and API test directories relative to sut-code
        ALLURE_RESULTS_DIR = 'allure-results'
        API_TESTS_DIR = 'API_POSTMAN' // Assuming your Postman files are in a folder named API_POSTMAN
        NEWMAN_ALLURE_RESULTS_DIR = 'newman-allure-results'
         tools{
                        nodejs 'NodeJS_24'
                    }
    }
    
    stages {stage('Test NodeJS Tool') {
            steps {
                script {
                    echo "Attempting to use NodeJS tool..."
                    tool name: 'NodeJS_24', type: 'org.jenkinsci.plugins.nodejs.tools.NodeJSInstallation'
                    sh 'node -v' // Check if node command is available
                    sh 'npm -v'  // Check if npm command is available
                }
            }
        }

        stage('Checkout SUT Dev') {
            steps {
                script {
                    echo "Checking out SUT repository: ${env.SUT_REPO}, branch: ${env.SUT_BRANCH_DEV}"
                    dir('sut-code') { // Checkout into a dedicated directory
                        git branch: env.SUT_BRANCH_DEV, credentialsId: env.GIT_CREDENTIAL_ID, url: env.SUT_REPO
                    }
                }
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                script {
                    echo "Setting up Python virtual environment and installing dependencies..."
                    dir('sut-code') {
                        sh 'python3 -m venv .venv'
                        // Use bash -c to ensure activate sources in the same shell as pip commands
                        sh 'bash -c "source .venv/bin/activate && pip install --upgrade pip"'
                        sh 'bash -c "source .venv/bin/activate && pip install -r requirements.txt"'
                    }
                }
            }
        }
        // --- NEW STAGE FOR NODE.JS AND NEWMAN SETUP ---
        stage('Setup NodeJS and Newman') {
            steps {
                script {
                    echo "Setting up NodeJS and installing Newman and Allure reporter..."
                    // Ensure you have configured a NodeJS tool in Jenkins -> Manage Jenkins -> Global Tool Configuration
                    // Replace 'NodeJS_18' with the name you gave your NodeJS installation
                   
                                       
                    // Install Newman and its Allure reporter globally on the agent
                    // This command should run successfully for Newman to find the reporter
                    sh 'npm install -g newman newman-reporter-allure newman-reporter-htmlextra'
                }
            }
        }
        // --- END NEW STAGE ---
        
        stage('Run Unit Tests') {
            steps {
                script {
                    echo "Running Django unit tests with pytest and generating Allure results..."
                    // Change CWD to the Django project root for consistent pathing with pytest.ini
                    dir('sut-code/my_learning_platform') {
                        sh '''#!/bin/bash
                            rm -rf ../${ALLURE_RESULTS_DIR}/unit-tests
                            mkdir -p ../${ALLURE_RESULTS_DIR}/unit-tests

                            # Check if the core app directory exists
                            [ -d my_learning_platform_core ] && echo "my_learning_platform_core directory found." || echo "Error: my_learning_platform_core directory NOT found."
                            source ../.venv/bin/activate
                            pytest accounts/tests/unit --alluredir=../${ALLURE_RESULTS_DIR}/unit-tests
                        '''
                    }
                }
            }
        }
        stage('Run Integration Tests') {
            steps {
                script {
                    echo "Running Django integration tests with pytest and generating Allure results..."
                    dir('sut-code/my_learning_platform') { // Assuming integration tests also run from the Django project root
                        sh '''#!/bin/bash

                            rm -rf ../${ALLURE_RESULTS_DIR}/integration-tests
                            mkdir -p ../${ALLURE_RESULTS_DIR}/integration-tests
                            source ../.venv/bin/activate
                            pytest accounts/tests/integration --alluredir=../${ALLURE_RESULTS_DIR}/integration-tests
                        '''
                    }
                }
            }
        }
        stage('Run API Tests') {
            steps {
                script {
                    echo "Running Postman API tests with Newman and generating Allure results..."
                    
                    // Define a specific directory for Newman's Allure results
                    def newmanAllureResultsDir = "${env.ALLURE_RESULTS_DIR}/api-tests"

                    // Clean and create the directory for API test results
                    sh "rm -rf ${newmanAllureResultsDir}"
                    sh "mkdir -p ${newmanAllureResultsDir}"

                    // Navigate to the directory containing your Postman collection and environment files
                    dir("sut-code/${env.API_TESTS_DIR}") {
                        sh '''#!/bin/bash
                            # Ensure Node.js is on PATH if it's not handled by Jenkins tool config automatically
                            # source ~/.nvm/nvm.sh # Uncomment if you use NVM and need to activate it

                            # Execute Newman tests for the specific folder
                            newman run 5_june_api.json \\
                                --folder "test_1" \\
                                -e 5_june_env.json \\
                                --reporters cli,htmlextra,allure \\
                                --reporter-htmlextra-export newman-report.html \\
                                --reporter-allure-export ../${newmanAllureResultsDir} # Note the '../' to point relative to sut-code/API_POSTMAN
                        '''
                    }
                }
            }
        }
           
       
        
        stage('Build and Deploy SUT to Staging (via Render)') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "SUT deployment to staging triggered by Render on commit to ${env.SUT_BRANCH_DEV}."
                    echo "Waiting 30 seconds for Render deployment to complete. (Consider polling health endpoint for robustness)."
                    sleep 30 // This is a placeholder; a health check would be better
                    echo "Assumed Render deployment to staging is complete."
                }
            }
        }
        
        stage('Trigger QA Tests against Staging') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Triggering downstream QA job: ${env.QA_JOB_NAME}"
                    // Ensure the 'STAGING_URL_PARAM' matches the parameter name in your QA-Tests-Staging job
                    build job: env.QA_JOB_NAME, parameters: [
                        string(name: 'STAGING_URL_PARAM', value: env.STAGING_URL)
                    ], wait: true
                }
            }
        }
    }

    post {
        // This 'always' block ensures these steps run regardless of the build outcome (success, failure, unstable, aborted).
        always {
            script {
                echo "Publishing Allure Report..."
                tool name: 'Allure_2.34.0', type: 'ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation'
                
                    allure(
                        reportBuildPolicy: 'ALWAYS',
                        results: [
                            [path: 'allure-results/unit-tests'],
                            [path: 'allure-results/integration-tests'],
                            [path: 'allure-results/api-tests']
                        ],
                        includeProperties: false,
                        jdk: '',
                        properties: []
                    )
                echo "Allure Report should be available via the link on the build page."
            }
            // Cleans up the workspace on the Jenkins agent regardless of build result
            // It's generally good to deleteDir() AFTER publishing reports/artifacts if they are generated in the workspace.
            deleteDir() 
        }
        success {
            echo 'SUT Build and Deploy to Staging pipeline finished successfully.'
        }
        unstable { // Add an 'unstable' block if you have tests that can make a build unstable but not outright fail
            echo 'SUT Build and Deploy to Staging pipeline finished with UNSTABLE tests.'
        }
        failure {
            echo 'SUT Build and Deploy to Staging pipeline FAILED.'
            // You might add notifications here, e.g., email or Slack
            // mail to: 'devs@example.com', subject: "Jenkins Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
        }
        aborted { // Handle manual abortion
            echo 'SUT Build and Deploy to Staging pipeline ABORTED.'
        }
    }
}
// Jenkinsfile.sut_build_staging (in majd.kassem.business.git)
pipeline {
    agent any // This job can run on any available Jenkins agent.

    environment {
        SUT_REPO = 'https://github.com/majd-j-kassem/majd.kassem.business.git'
        SUT_BRANCH_DEV = 'dev'
        STAGING_URL = 'https://majd-kassem-business-dev.onrender.com/' // Your Render staging URL
        QA_JOB_NAME = 'QA-Tests-Staging' // EXACT name of the Jenkins job for QA tests
        GIT_CREDENTIAL_ID = 'git_id' // <--- Use the ID you created in Step 1
        
        // --- MODIFICATION START ---
        // Correct DJANGO_SETTINGS_MODULE to match pytest.ini's expectation when my_learning_platform is the base
        DJANGO_SETTINGS_MODULE = 'my_learning_platform_core.settings'
        // --- MODIFICATION END ---

        // Define Allure and API test directories relative to sut-code
        ALLURE_RESULTS_DIR = 'allure-results'
        API_TESTS_DIR = 'API_POSTMAN' // Assuming your Postman files are in a folder named API_POSTMAN
        NEWMAN_ALLURE_RESULTS_DIR = 'newman-allure-results'
    }

    stages {
        stage('Checkout SUT Dev') {
            steps {
                script {
                    echo "Checking out SUT repository: ${env.SUT_REPO}, branch: ${env.SUT_BRANCH_DEV}"
                    dir('sut-code') { // Checkout into a dedicated directory
                        git branch: env.SUT_BRANCH_DEV, credentialsId: env.GIT_CREDENTIAL_ID, url: env.SUT_REPO
                    }
                }
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                script {
                    echo "Setting up Python virtual environment and installing dependencies..."
                    dir('sut-code') {
                        sh 'python3 -m venv .venv'
                        // Use bash -c to ensure activate sources in the same shell as pip commands
                        sh 'bash -c "source .venv/bin/activate && pip install --upgrade pip"'
                        sh 'bash -c "source .venv/bin/activate && pip install -r requirements.txt"'
                    }
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                script {
                    echo "Running Django unit tests with pytest and generating Allure results..."
                    // --- MODIFICATION START ---
                    // Change CWD to the Django project root for consistent pathing with pytest.ini
                    dir('sut-code/my_learning_platform') {
                            sh 'rm -rf ../allure-results/unit-tests'
                            sh 'mkdir -p ../allure-results/unit-tests'
                            //sh 'ls -la'
                            sh '[ -d my_learning_platform_core ]'
                            sh 'echo my_learning_platform_core directory found.'
                            // THIS IS THE LIKELY CULPRIT!
                            sh 'echo MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM'
                            sh 'echo "XXXXXXXXXXXXX: $(pwd)"'
                            sh 'pytest accounts/tests/unit --alluredir=../allure-results/unit-tests'
                        }
                }
            }
        }
           
       
        
        stage('Build and Deploy SUT to Staging (via Render)') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "SUT deployment to staging triggered by Render on commit to ${env.SUT_BRANCH_DEV}."
                    echo "Waiting 30 seconds for Render deployment to complete. (Consider polling health endpoint for robustness)."
                    sleep 30 // This is a placeholder; a health check would be better
                    echo "Assumed Render deployment to staging is complete."
                }
            }
        }
        
        stage('Trigger QA Tests against Staging') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Triggering downstream QA job: ${env.QA_JOB_NAME}"
                    // Ensure the 'STAGING_URL_PARAM' matches the parameter name in your QA-Tests-Staging job
                    build job: env.QA_JOB_NAME, parameters: [
                        string(name: 'STAGING_URL_PARAM', value: env.STAGING_URL)
                    ], wait: true
                }
            }
        }
    }

    post {
        always {
            // Cleans up the workspace on the Jenkins agent regardless of build result
            deleteDir() 
        }
        success {
            echo 'SUT Build and Deploy to Staging pipeline finished successfully.'
        }
        failure {
            echo 'SUT Build and Deploy to Staging pipeline FAILED.'
        }
    }
}
// Jenkinsfile.sut_build_staging (in majd.kassem.business.git)
pipeline {
    agent any // This job can run on any available Jenkins agent.

    environment {
        SUT_REPO = 'https://github.com/majd-j-kassem/majd.kassem.business.git'
        SUT_BRANCH_DEV = 'dev'
        STAGING_URL = 'https://majd-kassem-business-dev.onrender.com/' // Your Render staging URL
        QA_JOB_NAME = 'QA-Tests-Staging' // EXACT name of the Jenkins job for QA tests
        GIT_CREDENTIAL_ID = 'git_id' // <--- Use the ID you created in Step 1
        DJANGO_SETTINGS_MODULE = 'my_learning_platform_core.settings' // <--- CHANGED THIS LINE
        ALLURE_RESULTS_DIR = 'allure-results'
        API_TESTS_DIR = 'api-tests'
        NEWMAN_ALLURE_RESULTS_DIR = 'newman-allure-results'
    }

    stages {
        stage('Checkout SUT Dev') {
            steps {
                script {
                    echo "Checking out SUT repository: ${env.SUT_REPO}, branch: ${env.SUT_BRANCH_DEV}"
                    dir('sut-code') { // Checkout into a dedicated directory
                        git branch: env.SUT_BRANCH_DEV, credentialsId: env.GIT_CREDENTIAL_ID, url: env.SUT_REPO
                    }
                }
            }
        }
        stage('Setup Python Environment') {
            steps {
                script {
                    echo "Setting up Python virtual environment and installing dependencies..."
                    dir('sut-code') {
                        sh 'python3 -m venv .venv'
                        sh 'bash -c "source .venv/bin/activate && pip install --upgrade pip"'
                        sh 'bash -c "source .venv/bin/activate && pip install -r requirements.txt"'
                    }
                }
            }
        }
        stage('Run Unit Tests') {
    steps {
        script {
            echo "Running Django unit tests with pytest and generating Allure results..."
            dir('sut-code') {
                sh "rm -rf ${env.ALLURE_RESULTS_DIR}/unit-tests"
                sh "mkdir -p ${env.ALLURE_RESULTS_DIR}/unit-tests"
                
                // Add this debug command to verify the directory structure
                sh "ls -la"
                sh "ls -la my_learning_platform_core || echo 'No my_learning_platform_core directory found'"
                
                sh """bash -c "
                    source .venv/bin/activate
                    
                    # Debug environment
                    echo 'Current directory: ' && pwd
                    echo 'Python path: ' && echo \$PYTHONPATH
                    echo 'DJANGO_SETTINGS_MODULE: ' && echo \$DJANGO_SETTINGS_MODULE
                    
                    # Set PYTHONPATH to include both the project root and the parent directory
                    export PYTHONPATH=\$PWD:\$PWD/my_learning_platform_core
                    
                    # Verify Python can import the settings
                    python -c 'import my_learning_platform_core.settings; print(\"Successfully imported settings\")' || echo 'Failed to import settings'
                    
                    # Run pytest with increased verbosity
                    pytest accounts/tests/unit -v --alluredir=${env.ALLURE_RESULTS_DIR}/unit-tests
                " """
            }
        }
    }
}
        stage('Run Integration Tests') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Running Django integration tests with pytest and generating Allure results..."
                    dir('sut-code') { // Change into the directory *containing* your Django project root
                        // Run Django migrations first
                        sh """bash -c "
                            source .venv/bin/activate
                            export DJANGO_SETTINGS_MODULE=${env.DJANGO_SETTINGS_MODULE}
                            export PYTHONPATH=$PWD
                            python manage.py migrate --noinput
                        " """

                        sh "rm -rf ${env.ALLURE_RESULTS_DIR}/integration-tests" // Path relative to 'sut-code'
                        sh "mkdir -p ${env.ALLURE_RESULTS_DIR}/integration-tests" // Path relative to 'sut-code'
                        sh """bash -c "
                            source .venv/bin/activate
                            export DJANGO_SETTINGS_MODULE=${env.DJANGO_SETTINGS_MODULE}
                            export PYTHONPATH=$PWD # Set PYTHONPATH to 'sut-code'
                            pytest accounts/tests/integration --alluredir=${env.ALLURE_RESULTS_DIR}/integration-tests
                        " """
                        echo "Generating Allure report for Unit and Integration tests..."
                        // Allure report generation should also reference paths relative to 'sut-code'
                        allure([
                            includeProperties: false,
                            jdk: '',
                            reportBuildPolicy: 'ALWAYS',
                            results: ["${env.ALLURE_RESULTS_DIR}/unit-tests", "${env.ALLURE_RESULTS_DIR}/integration-tests"]
                        ])
                    }
                }
            }
        }
        stage('Run API Tests') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Running Postman API tests with Newman..."
                    dir('sut-code') { // Newman is likely run from the 'sut-code' root, adjust paths
                        sh "bash -c 'npm install -g newman newman-reporter-allure'"
                        sh "rm -rf ${env.ALLURE_RESULTS_DIR}/${env.NEWMAN_ALLURE_RESULTS_DIR}"
                        sh "mkdir -p ${env.ALLURE_RESULTS_DIR}/${env.NEWMAN_ALLURE_RESULTS_DIR}"
                        sh "bash -c 'newman run ${env.API_TESTS_DIR}/your_collection.json -e ${env.API_TESTS_DIR}/your_environment.json -r allure --reporter-allure-export=${env.ALLURE_RESULTS_DIR}/${env.NEWMAN_ALLURE_RESULTS_DIR}'"
                    }
                }
            }
        }
        stage('Build and Deploy SUT to Staging (via Render)') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "SUT deployment to staging triggered by Render on commit to ${env.SUT_BRANCH_DEV}."
                    echo "Waiting 30 seconds for Render deployment to complete. (Consider polling health endpoint for robustness)."
                    sleep 30
                    echo "Assumed Render deployment to staging is complete."
                }
            }
        }
        stage('Trigger QA Tests against Staging') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Triggering downstream QA job: ${env.QA_JOB_NAME}"
                    build job: env.QA_JOB_NAME, parameters: [
                        string(name: 'STAGING_URL_PARAM', value: env.STAGING_URL)
                    ], wait: true
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
        success {
            echo 'SUT Build and Deploy to Staging pipeline finished successfully.'
        }
        failure {
            echo 'SUT Build and Deploy to Staging pipeline FAILED.'
        }
    }
}